# Bayesian Network
# Sari Nahmad, Anthony Tockar, Mike Vanger

import numpy as np

class BayesNetwork:

    '''
    1. Create, observe and change variables, including their names, possible values and marginal and
    conditional distributions as appropriate. For this assignment we will confine ourselves to discrete
    random variables exclusively.
    2. Add, observe and remove nodes to a Bayesian network
    3. Allow ways to create, observe and alter the structure of the network
    4. Save and load a Bayesian network from file (I strongly recommend JSON)
    5. Set and remove hard evidence on multiple variables
    6. Do inference on the network using variable elimination (or --optionally-- using a Junction Tree
    algorithm) after setting evidence.
    '''

    def __init__(self):
        self.nodes = []

    ## Create nodes class
    class node():
        def __init__(self, name, prior):
            self.name = name
            self.prior = prior
            self.parents = []
            self.children = []

    # Method to add nodes
    def addNode(self, node):
        ### CONSIDER ADDING SOME CHECKS - E.G. WHETHER NODE ALREADY EXISTS, WHETHER PROBABILITIES SUM TO 1
        self.nodes.append(node)
        print("New node \"" + node.name + "\" created")

    # Method to observe nodes
    def observeNode(self, node):
        print('Name:\t' + node.name)
        print('Prior distribution:\t' + str(node.prior))

    # Method to remove nodes
    def removeNode(self, node):
        self.nodes.remove(node)
        print("Node \"" + node.name + "\" removed")

    def linkNodes(self, parent, child):
        parent.children.append(child)
        child.parents.append(parent)

    # Method to observe overall structure
    def observeStructure(self):
        ### Will want to probably present this as a hierarchy - e.g. "level: nodeName"
        for n in self.nodes:
            print(n.name)

### Test functionality

bn = BayesNetwork()

## Create, observe and remove a node
ageNode = bn.node('Age', {'young': 0.8, 'old': 0.2})
bn.addNode(ageNode)

genderNode = bn.node('Gender',{'M': 0.49, 'F': 0.51})
bn.addNode(genderNode)

smokerNode = bn.node('Smoker',{'No': 0.8, 'Light': 0.15, 'Heavy': 0.05})

bn.linkNodes(ageNode, smokerNode)
bn.linkNodes(genderNode, smokerNode)

cancerNode = bn.node('Cancer',{'None': 0.935, 'Benign': 0.046, 'Malignant': 0.019})

bn.observeNode(ageNode)

# bn.removeNode('age')
